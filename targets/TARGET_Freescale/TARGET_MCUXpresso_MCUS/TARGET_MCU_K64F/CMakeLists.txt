# SPDX-License-Identifier: Apache-2.0

target_sources(${PROJECT_NAME} PUBLIC dma_reqs.h)
target_sources(${PROJECT_NAME} PUBLIC mbed_crc_api.c)
target_sources(${PROJECT_NAME} PUBLIC peripheral_clock_defines.h)
target_sources(${PROJECT_NAME} PUBLIC pwmout_api.c)
target_sources(${PROJECT_NAME} PUBLIC reset_reason.c)
target_sources(${PROJECT_NAME} PUBLIC serial_api.c)
target_sources(${PROJECT_NAME} PUBLIC spi_api.c)
target_sources(${PROJECT_NAME} PUBLIC trng_api.c)
target_sources(${PROJECT_NAME} PUBLIC us_ticker.c)
target_sources(${PROJECT_NAME} PUBLIC us_ticker_defines.h)
target_sources(${PROJECT_NAME} PUBLIC watchdog_api.c)

# TODO: FRDM selection

target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/crc.c)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/crc.h)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/device.h)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/fsl_clock_config.c)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/fsl_clock_config.h)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/fsl_phy.c)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/fsl_phy.h)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/mbed_overrides.c)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/PeripheralNames.h)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/PeripheralPinMaps.h)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/PeripheralPins.c)
target_sources(${PROJECT_NAME} PUBLIC TARGET_FRDM/PinNames.h)

target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_adc16.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_adc16.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_clock.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_clock.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_cmp.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_cmp.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_cmt.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_cmt.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_common.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_crc.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_crc.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dac.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dac.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dmamux.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dmamux.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dspi.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dspi.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dspi_edma.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_dspi_edma.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_edma.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_edma.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_enet.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_enet.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_ewm.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_ewm.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_flash.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_flash.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_flexbus.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_flexbus.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_flexcan.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_flexcan.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_ftm.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_ftm.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_gpio.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_gpio.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_i2c.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_i2c.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_i2c_edma.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_i2c_edma.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_llwu.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_llwu.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_lptmr.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_lptmr.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_pdb.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_pdb.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_pit.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_pit.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_pmc.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_pmc.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_port.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_rcm.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_rcm.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_rnga.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_rnga.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_rtc.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_rtc.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sai.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sai.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sai_edma.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sai_edma.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sdhc.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sdhc.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sim.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sim.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_smc.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_smc.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sysmpu.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_sysmpu.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_uart.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_uart.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_uart_edma.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_uart_edma.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_vref.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_vref.h)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_wdog.c)
target_sources(${PROJECT_NAME} PUBLIC drivers/fsl_wdog.h)

target_sources(${PROJECT_NAME} PUBLIC device/cmsis.h)
target_sources(${PROJECT_NAME} PUBLIC device/cmsis_nvic.h)
target_sources(${PROJECT_NAME} PUBLIC device/fsl_device_registers.h)
target_sources(${PROJECT_NAME} PUBLIC device/MK64F12.h)
target_sources(${PROJECT_NAME} PUBLIC device/MK64F12_features.h)
target_sources(${PROJECT_NAME} PUBLIC device/system_MK64F12.c)
target_sources(${PROJECT_NAME} PUBLIC device/system_MK64F12.h)

# TODO: only GCC toolchain here
target_sources(${PROJECT_NAME} PUBLIC device/TARGET_GCC_ARM/MK64FN1M0xxx12.ld)
target_sources(${PROJECT_NAME} PUBLIC device/TARGET_GCC_ARM/startup_MK64F12.S)
